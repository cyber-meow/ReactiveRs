initSidebarItems({"enum":[["LoopStatus","Indicates if a loop is terminated or not."]],"fn":[["execute_process","Executes a process in a newly created runtime and return its value (without parallization)."],["execute_process_parallel","Executes a process in newly created runtimes and return its value (with parallization)."],["execute_process_parallel_with_main","Executes a process in newly created runtimes and return its value. Each runtime is runned in a separated child thread and these threads are runned in parallel with a main function that is executed in the main thread. This construction is necessary when some part of the program must be executed in the main thread."],["join_all","Creates a process that executes a collection of processes in parallel and collects the results into a destination `Vec<T>` in the same order as they were provided.   However, since the Rust's type system force all the values in a vector to take the same type and most of the processes have different type from each other, this may not be very useful. (What's worse, a process cannot be made into a trait object.)"],["value_proc","Create a new process that returns the value `v` immediately."]],"struct":[["AndThen","Chains a computation onto the end of another process."],["Flatten","Flattens the process when it returns another process to get only the result of the final process."],["IfElse","Selects the process to run according to what the previous process returns."],["Join","Parallel composition of two processes."],["JoinAll","A process which takes a list of processes and terminates with a  vector of the completed values."],["Loop","Repeats a process forever."],["Map","A process that applies a function to the returned value of another process."],["Pause","The process is suspended until next instant."],["Repeat","Repeats a process several times and collects all the produced values in a vector which is returned at the end of the loop."],["Then","Executes the second process while ignoring the returned value of the first process."],["Value","A process that returns a value of type `V`."],["While","Repeats a process having `LoopStatus` as return type until it returns `Exit(v)` in which case the created process exits and returns `v`."]],"trait":[["ConstraintOnValue","This is a workaround to have constraints on associated types. Must be implemented by every type that want to represent some parallel process."],["Process","A abstract reactive process. A method `call` is in fact also necessary. Please see `ProcessSt` and `ProcessPl` for more information."],["ProcessMut","A process that can be executed multiple times, modifying its environement each time."],["ProcessMutPl","A repeatable reactive process that can be safely passed and shared between threads."],["ProcessMutSt","A repeatable reactive process to be executed in a single thread."],["ProcessPl","A reactive process that can be safely passed and shared between threads."],["ProcessSt","A reactive process to be executed in a single thread."]]});